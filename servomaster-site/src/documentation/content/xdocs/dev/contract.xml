<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "http://apache.org/forrest/dtd/document-v12.dtd">
<document> 
  <header> 
    <title>ServoMaster: Design Contract</title> 
  </header> 
  <body> 
    <section>
        <title>I'd like the ideal servo controller to...</title>
        
        <table>
            
            <tr>
                <th>Feature</th>
                <th><link href="site:ft639">FT639</link></th>
                <th><link href="site:phidget_quad">Quad</link></th>
                <th><link href="site:phidget_servo8">Advanced</link></th>
                <th><link href="site:nic_servo">1-Wire</link></th>
                <th><link href="site:pololu">Pololu</link></th>
                <th><link href="site:parallax">Parallax</link></th>
            </tr>
            <tr>
                <td>
                
                    Report the hardware status.
                
                </td>
                <td colspan="5">See <link href="site:contract_hardware">Hardware Status Reporting</link></td>
                <td>+</td>
            </tr>
            <tr>
                <td>
                
                    Support capabilities discovery. Of course, on the
                    hardware level the servo can't really tell much about
                    itself, but the abstraction should support it.
                     
                </td>
                <td colspan="6">+</td>
            </tr>
            <tr>
                <td>
                
                     Implication: a database of servos in existence would
                     not take much space, but will be very useful.
                     
                </td>
                <td colspan="6"></td>
            </tr>
            <tr>
                <td>
                
                     Complication: the servo speed and torque changes as the
                     voltage changes, so coming up with a uniform
                     description for this dependency is going to be tricky.
                     
                </td>
                <td colspan="6"></td>
            </tr>
            <tr>
                <td>
                
                    It should be possible to control the parameters for each
                    servo separately (in other words, the servo abstraction
                    should be configurable).
                     
                </td>
                <td></td>
                <td>+</td>
                <td>+</td>
                <td>+</td>
                <td>+</td>
                <td>+</td>
            </tr>
            <tr>
                <td>
                
                    It should be possible to preset the minimum and maximum
                    angle for the servo. And not only 90&deg; vs. 180&deg;,
                    but arbitrary angle.
                     
                </td>
                <td colspan="6">+</td>
            </tr>
            <tr>
                <td>
                
                    Implied: the pulse length range. The limits may be
                    defined by the servo construction and/or mechanical layout
                    of the apparatus in which the servo is used. This is going
                    to get really technical, but the ability to specify the
                    minimum and maximum pulse length just has to be
                    present.
                     
                </td>
                <td></td>
                <td>+</td>
                <td>+</td>
                <td>?</td>
                <td>+</td>
                <td>+</td>
            </tr>
            <tr>
                <td>
                
                    Implied: range should be included into capabilities
                    discovery. Implied: the capabilities for each particular
                    servo are different.
                     
                </td>
                <td></td>
                <td>+</td>
                <td>+</td>
                <td>?</td>
                <td>+</td>
                <td>+</td>
            </tr>
            <tr>
                <td>
                
                    Even though the actual range may be different from
                    90&deg; or 180&deg;, the number of steps to cover the actual
                    range should be the same.
                     
                </td>
                <td></td>
                <td></td>
                <td>+</td>
                <td>?</td>
                <td>+</td>
                <td>+</td>
            </tr>
            <tr>
                <td>
                
                     Exactly as the capabilities of each physical instance of
                     the servo are different, the capabilities of each physical
                     instance of the controller may be different. To allow
                     proper operation, there should be a mechanism to override
                     default (advertised) capabilities of the servo and the
                     controller. This can be achieved by providing
                     "configurability".
                     
                </td>
                <td colspan="6"></td>
            </tr>
            <tr>
                <td>
                
                     An entity able to instantiate the controller and configure
                     it ("controller factory") will be useful. Implied:
                     generalized servo controller and servo definition format.
                     Begs for XML configuration file.
                     
                </td>
                <td colspan="6"></td>
            </tr>
            <tr>
                <td>
                
                    The servo interface shouldn't really accept the values
                    from 0 to 255 for the servo position, but rather 0.0 to 1.0
                    (extreme left to extreme right). The reason is, different
                    controllers have different value ranges - some operate from
                    0 to 255, some from 0 to 254, there is at least one that
                    accepts positions from 0 to 4000, some use the high bit as
                    the direction indicator and the rest as position. Implied:
                    precision is different. Implied: controller precision should
                    be included into capabilities discovery.
                     
                </td>
                <td colspan="6">+</td>
            </tr>
            <tr>
                <td>
                
                    Provide the coordinate transformation between the
                    physical servo position and input value. Useful for
                    compensating the rotational servo movement to linear
                    controlled body movement, as well as applications where the
                    natural input value range differs from 0...1 (for example,
                    steering wheels and rudders). This abstraction shouldn't be
                    really a part of the servo abstraction, but rather a module
                    you can plug the servo into.
                     
                </td>
                <td colspan="6">+</td>
            </tr>
            <tr>
                <td>
                
                    Inverting the coordinate polarity to reverse the servo
                    is not exactly a life saver, but can be useful and is really
                    simple. It can be a part of the coordinate transformation
                    module as well.
                     
                </td>
                <td colspan="6">+</td>
            </tr>
            <tr>
                <td>
                
                    Provide the means to incorporate the closed loop feedback
                    signal and mapping between the feedback and control.
                     
                </td>
                <td colspan="6"></td>
            </tr>
            <tr>
                <td>
                
                    The ideal servo controller doesn't necessarily have to be
                    integrated - there are cases when the servos are located in
                    remote locations. The surface mount design can possibly fit
                    on the back of the servo.
                     
                </td>
                <td colspan="6"></td>
            </tr>
            <tr>
                <td>
                
                    Implication: it's not that the abstraction of the
                    <strong>servo controller</strong> that is important, it is
                    the abstraction of the <strong>servo</strong>.
                     
                </td>
                <td colspan="6">+</td>
            </tr>
            <tr>
                <td>
                
                    However, the abstraction of the servo controller is
                    important as well: even though the actual servo drivers may
                    be physically and logically separated, they are accessed in
                    the same uniform manner, and share common properties.
                     
                </td>
                <td colspan="6">+</td>
            </tr>
            <tr>
                <td>
                
                    From the practical standpoint: how do I care if the
                    controller is one piece or distributed, as long as the cost
                    is comparable?
                     
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td>+</td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td>
                
                     The ideal controller should not be resource hungry. 
                     Serial and parallel devices are evil, they want a
                     dedicated port to control them, why? Good candidates:
                     USB, 1-Wire.
                     
                </td>
                <td></td>
                <td>+</td>
                <td>+</td>
                <td>+</td>
                <td>+/-</td>
                <td>+/-</td>
            </tr>
            <tr>
                <td>
                
                    Hardware controlled transition is a desirable feature.
                     
                </td>
                <td></td>
                <td></td>
                <td>+</td>
                <td></td>
                <td>+</td>
                <td>+</td>
            </tr>
            <tr>
                <td>
                
                    Controlled transition: the transition pattern can be
                    specified, for example, just a simple linear transition
                    in a given time, or a constant and/or limited
                    acceleration transition (good with moving heavy
                    controlled bodies), or approximation transition (good
                    when the exactness of approach to the specified position
                    is required), or any sort of special effect ("drunken
                    master").
                    
                </td>
                <td colspan="6">See <link href="site:transform">Transitions &amp; Transformations</link></td>
            </tr>
            <tr>
                <td>
                
                    Transition controller isn't really stackable, so it is
                    enough to "attach" one to the servo abstraction.
                    
                </td>
                <td colspan="6">+</td>
            </tr>
            <tr>
                <td>
                
                    Transition controller may interfere with the coordination
                    transformers, so there should be a possibility to attach it
                    at any level of the coordination transformer stack.
                    
                </td>
                <td colspan="6">+</td>
            </tr>
        </table>
        
    </section>
    <section>
        <title>Hardware Status Reporting</title>
        <anchor id="hardware"/>
        
        <p>
        
            At the moment of writing, the only controllers that support
            hardware status reporting are the <link
            href="site:parallax">Parallax serial and USB controllers</link>. 
            However, there are some additional limited special cases - they
            are discussed below.
            
        </p>
        
        <section>
            <title>Removable Devices</title>
            <anchor id="removable"/>
            
            <p>
            
                One case where a hardware device departure (that may be
                considered a failure) and/or arrival is really easy to
                determine is when the device communicates with the computer
                using a hotpluggable protocol such as USB or IEEE 1394,
                a.k.a. FireWire, or 1-Wire&reg;.
                
            </p>
            
            <p>
            
                Consequently, all the devices that are using one of these
                protocols are supported as removable. ServoMaster API users
                will get arrival and departure notifications should they
                choose to listen to them.
                
            </p>
            
        </section>
        <section>
            <title>Disconnected Mode</title>
            
            <p>
            
                In <link href="ext:dz">some cases</link> services provided
                by ServoMaster API are required to run mission-critical,
                long-lived applications. Since disconnect related hardware
                failures may be transient, it makes perfect sense not to
                fail the API object completely, but switch to
                <em>disconnected mode</em>, and return back to normal mode
                as soon as connectivity is restored.
                
            </p>
            <p>
            
                It is possible to <link
                href="site:meta_controller_allow_disconnect">programmatically
                control</link> whether the device is allowed to be
                disconnected.
                
            </p>
        </section>
    </section>
    
  </body>
</document>
