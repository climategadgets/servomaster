0.7p0   - Added support for Pololu USB 16-Servo controller
        - Replaced --enable-ft639 and --enable-phidget with more generic
	  --enable-serial and --enable-usb
        - Added LimitTransformer
	- Added TransitionCompletionToken

0.6p3dev1 Replaced jUSB (http://jusb.sf.net) with javax.usb
          (http://javax-usb.sf.net), to get a feeling for it. Seems to work
          fine so far.

0.6p2-3 - Changed Ant invocation from "Ant as Java class" to "Ant as a shell
	  script" - allows to work with Ant 1.6.1, which is not yet packaged
	  as RPM.

0.6p2-2 - Fixed a silly requirement to have a specific JDK installed;
	- Added a warning if the Java binary wasn't found at runtime.

0.6p2	- Stability bugfixes. Hopefully, 'Disconnected mode' is really
	  supported for QuadServo this time.
	- Allowed devices to be disconnected at driver startup (if exact
	  hardware type is known)
	- Run script name changed again to servomaster_console (to allow a
	  polite RPM layout)
	- Changed test script name to servomaster_sync_check
	- Changed deployment layout to conform to RPM guidelines better

0.6p1	- Firmware update for AdvancedServo, fixed the USB timeout problem

0.6p0	- 'Disconnected mode' properly supported for QuadServo

0.5p0	- Added support for autoconf 2.53 and automake 1.6
	- Removed support for autoconf 2.13 - it was not possible to keep
	  both 2.13 and 2.53 code together without running into
	  complications
	- Updated the firmware code for PhidgetAdvancedServo
	- Run script name changed from 'ft_view' (which was originally
	  created for FT639) to more proper 'console'
	- Multiple FT639 metadata bugfixes

0.4p2   - Added support for PhidgetAdvancedServo
	- Support for different Phidgets made generic, the only part that
	  needs to be changed now when new Phidget is introduced is the
	  ProtocolHandler and meta objects
	- Changed the metadata model. From now on, it is possible to
	  discover the controller and servo abstraction capabilities in a
	  generic way. Sort of like JavaBeans for the servo controllers.

0.4p0	- New driver is being introduced: the PhidgetServoController. Since
	  this is a qualitative (1 => N), not a quantitative (N => N+1)
	  change, it can be considered a rewrite - the
	  AbstractServoController was born implementing the features common
	  for two so different controllers.
	- Common parts for the existing controllers are merged into
	  AbstractServoController
	- New functionality added to the Servo: ability to specify the
	  timings and per-servo silent mode support
	- Console changed to allow the controller port automatic discovery,
	  if it is supported by the controller driver
	- Silent mode handler is rewritten, now it supports both the
	  controller and the servo (and generally anything)

0.3p2	- Fixed a major synchronization screwup (made possible by JDK 1.4
	  final): there were synchronization locks on both the controller
	  instance (requested by the silencer and heartbeat threads) and
	  servo instance (positioning requests), at the same time the servo
	  positioning methods were using the synchronized controller
	  methods, as a result, deadlock occured.
	- Implemented consistent initialization check - now it is not
	  possible for the controller implementation to pretend it's working
	  or give the wrong problem cause if it wasn't initialized yet

0.3p1	- More bugfixes
	- Lazy mode added: the command to the controller will not be sent
	  unless it is actually required
	- Heartbeat: if there was no positioning commands within
	  configurable time interval, the servo position will be set again,
	  just in case it drifted away. Also works with controller power
	  blackouts

0.3p0	- API FREEZE
	- More bugfixes
	- Console improved
	- Documentation updated

0.2p2	- Mostly bugfixes

0.2p1	- Added the coordination transforation support and some transformers
        - Reflected the coordination transformation on the console

0.2p0	- API changed to accept double 0...1 instead of int 0...255
        - controller and servo metadata added
        - major bugfixes related to the above changes - one bug still
          lingers, it's not possible to get up to the max in smooth mode,
          but what the hell, let's release now and fix later - it's going to
          be in 0.2p1
        - minor bugfixes not related to the API changes

0.1p2

	- Servos change position according to the range selection immediately after
          the range change and don't wait until the next setPosition() is
          issued
	- After the controller reset, the slider is set to the proper (central)
	  position
	- ServoView implementation is now vendor-independent
	- Gave up on fixing the header length behavior for FT639

0.1p1

	- The servo controller view is not hardware-specific anymore
	- Header length figured out for FT639
	- Interfaces changed to accomodate the servo controller view panel
	- Controller view implemented for FT639
	- Removed unnecessary methods from FT639 implementation
	- Removed ambiguous methods from the Servo interface
	- Tuned up the Console appearance
	- Added the demos to the Console
	- Updated the documentation

0.1p0

	- Initial release. Basic functionality.
