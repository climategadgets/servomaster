<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "http://apache.org/forrest/dtd/document-v12.dtd">
<document>
    <header>
        <title>ServoMaster: Rant on Serial/USB Bridges</title>
    </header>
    <body>
        
        <section>
            <title>The Subject</title>
            
            <p>
            
                For the scope of discussion, let's define the
                <code>Serial/USB Bridge</code>, a.k.a. <code>Serial/USB
                Adapter</code>, as the device that has the following
                interfaces, ordered from controlled hardware to controlling
                application:
                 
            </p>
            
            <ol>
            
                <li>
                
                    A physical serial interface, integrated or external -
                    the controlled hardware is connected to this interface;
                    
                </li>
                <li>
                
                    A physical USB interface which connects the bridge to
                    the host computer;
                    
                </li>
                <li>
                
                    A virtual serial interface that is, supposedly,
                    undistinguishable from a physical serial interface - the
                    controlling application is using this port.
                    
                </li>
                
            </ol>
            
        </section>
        <section>
            <title>The Shortcut</title>
            
            <p>
            
                Apparently, Serial/USB bridges were thought to be a cool
                idea by embedded hardware designers - why, you get all the
                benefits of a USB interface with almost no extra effort -
                connect the chip and bingo, your piece of hardware now has a
                USB interface. Moreover, it is possible to retain a serial
                interface as well with a very little extra effort, so your
                hardware instantly becomes dual-interfaced.
                 
            </p>
            <p>
            
                On the other hand, I bet that driver programmers were
                equally ecstatic about this, at least at the beginning.
                Look, we don't have to write yet another driver - it works
                already!
                
            </p>
        </section>
        <section>
            <title>The Problem</title>
            
            <p>
            
                <em>If it looks too good to be true, it usually is</em>.
                
            </p>
            <p>
            
                See, there's just this little pesky problem of the USB
                protocol being a protocol that supports <em>removable</em>
                devices. And you probably remember the days when you didn't
                dare to plug or unplug a serial device without shutting off
                the host computer first, lest you fry them both. The serial
                interface never even hinted at a possibility of the other
                side being removable - it only has a notion of a
                communication error, nothing else.
                
            </p>
            <p>
            
                Coupled with the fact that the devices provided with the
                Serial/USB bridges quite often have limited intelligence,
                and some don't even provide any kind of status feedback
                (they're write-only)... Houston, we have a problem.
                Actually, several.
                
            </p>
            
            <section>
                <title>Electrical Incompatibility</title>
                
                <p>
                
                    USB devices, by necessity, have to be connected to the
                    power circuit provided by the USB bus. Also, it may
                    happen that a device originally designed as a serial
                    device doesn't provide a proper ground separation
                    between the USB provided ground and an external power
                    provided for the rest of the device. Therefore, it is
                    possible, at least theoretically, that a deficient
                    hardware design may allow you to fry either itself, or
                    the USB hub or the USB port it's plugged into.
                    
                </p>
                
            </section>
            <section>
                <title>Missing Support for Removable Devices</title>
                
                <p>
                
                    Your application will not be able to take advantage of
                    the fact that USB specification supports the notion of a
                    removable device.
                    
                </p>
            </section>
            <section>
                <title>Proprietary Drivers</title>
                
                <p>
                
                    Some of the Serial/USB bridges on the market chose not
                    to publish their USB API. One pathetic case is Silicon
                    Laboratories CP2101 - and unfortunately, it is used in
                    one of USB controllers, which is pretty damn good
                    otherwise.
                    
                </p>
                <p>
                
                    The worst case consequence of this is that you won't be
                    able to use the device with Linux, which kind of defeats
                    the purpose (for me, at least).
                    
                </p>
            </section>
            <section>
                <title>Runaway Ports</title>
                
                <note>
                
                    This section is a total speculation and may be
                    completely untrue, so let's just call it what it is, a
                    speculation, until it is either confirmed or denied.
                    
                </note>
                <p>
                
                    What happens to a virtual serial port when the actual
                    hardware is disconnected? Furthermore, what happens to
                    it when the hardware is reconnected? Is the serial port
                    name the same?
                    
                </p>
                <p>
                
                    What if I configure the application to use, say, a
                    serial port <code>/dev/ttyS4</code> when I have the only
                    Serial/USB bridge plugged in, and then reboot the box
                    and add another Serial/USB bridge? Is the port name
                    going to be the same? Likewise, if I unplug a device and
                    plug in a different kind of a device, won't I get a
                    situation when I'm talking not to the device I think I'm
                    talking to?
                    
                </p>
            </section>
        </section>
        <section>
            <title>The Solution</title>
            
            <p>
            
                The only real (I mean <em>reliable</em>) solution, at least
                the way it looks from where I'm standing, is to ignore the
                virtual serial port drivers and write the driver directly
                against the USB specifications for the Serial/USB bridge. 
                This way, we get the best of both worlds: it is possible to
                at least partially reuse the serial driver code, and it is
                possible to address the concerns addressed above, at least
                the removable device part and runaway port issue.
                
            </p>
            <p>
            
                There are downsides to this solution, of course.
                
            </p>
            <p>
               
                First of all, the resent trend in Linux kernel development
                seems to be to create kernel modules for all kinds of stuff
                imaginable, so I would assume, the modules will have to be
                removed - and you only pray that your favorite digital
                camera doesn't have the same kind of Serial/USB bridge chip
                as your favorite servo controller.
                
            </p>
            <p>
            
                Then, this solution implies more work for the software
                driver developer, and slower time-to-market, so you have to
                consider whether the problems outlined above matter for your
                cause.
                
            </p>
        </section>
        
    </body>
</document>
