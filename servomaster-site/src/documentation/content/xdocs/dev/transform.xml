<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "http://apache.org/forrest/dtd/document-v12.dtd">
<document>
    <header>
        <title>ServoMaster: Transition Controllers, Coordinate Transformers &amp; Their Combinations</title>
    </header>
    <body>
        
        <section>
            <title>Coordinate Transofmers</title>
            
            <p>
            
                The coordinate transformers (see the API documentation) are
                stacked on top of the servo abstraction (actually, the
                coordinate transformer <em>is a</em> servo, in an object
                oriented sense).
                 
            </p>
        </section>
        <section>
            <title>Transition Controllers</title>
            
            <p>
            
                Since the controlled transition may be supported by the
                controller itself, it makes sense to make the transition
                controller abstraction a part of servo abstraction, unlike
                coordinate transformer.
                 
            </p>
            
        </section>
        <section>
            <title>Working Together</title>
            
            <p>
            
                There are interesting side effects. Consider this example:
                
            </p>
            
            <source>
    ServoController controller = new FooController();
    Servo servo = controller.getServo("s");
    Servo linearServo = new LinearTransformer(s);
    
    linearServo.setPosition(0);
    <strong>servo</strong>.attach(new CrawlTransitionController());
    linearServo.setPosition(1);
            </source>
            
            <p>
                
                Pay attention to the fact that the transition controller is
                attached to the servo itself.
                
            </p>
            <p>
                 
                This will require the servo to move as fast as it can to the
                linear 0 position, then crawl to the linear 1.0. However, in
                this example the angular movement of the servo will be
                smooth, not linear.
                 
            </p>
            <p>
                 
                The more is a difference between the angular position
                required from the servo and the position requested from the
                topmost transformer, the more noticeable this discrepancy
                will become.
                 
            </p>
            <p>
                 
                However, there are cases when this is perfectly acceptable -
                for example, for the high latency systems where the servo
                controls the valves, and the transition time is negligible,
                but the linearity of the control is important.
                 
            </p>
            <p>
                 
                Compare: 
            
            </p>
            <source>
    ServoController controller = new FooController();
    Servo servo = controller.getServo("s");
    Servo linearServo = new LinearTransformer(s);
    
    linearServo.setPosition(0);
    <strong>linearServo</strong>.attach(new CrawlTransitionController());
    linearServo.setPosition(1);
            </source>
            
            <p>
            
                 In this example, the transition controller is attached to
                 the linear coordinate transformer, and the <em>linear</em>
                 movement of the servo controlled object will be smooth, but
                 not the <em>angular</em> movement of the servo.
            
            </p>
            
        </section>
        
    </body>
</document>
